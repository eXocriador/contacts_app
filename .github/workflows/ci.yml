name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Backend Tests and Build
  backend:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: backend/yarn.lock

    - name: Install dependencies
      working-directory: ./backend
      run: yarn install --frozen-lockfile

    - name: Run linting
      working-directory: ./backend
      run: yarn lint

    - name: Build application
      working-directory: ./backend
      run: yarn build

    - name: Run tests (if available)
      working-directory: ./backend
      run: yarn test || echo "No tests configured yet"
      continue-on-error: true

  # Frontend Tests and Build
  frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Install dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile

    - name: Run linting
      working-directory: ./frontend
      run: yarn lint

    - name: Build application
      working-directory: ./frontend
      run: yarn build

    - name: Run tests (if available)
      working-directory: ./frontend
      run: yarn test || echo "No tests configured yet"
      continue-on-error: true

  # Security audit
  security:
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: backend/yarn.lock

    - name: Audit backend dependencies
      working-directory: ./backend
      run: yarn audit --audit-level moderate || true

    - name: Setup Node.js for frontend
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Audit frontend dependencies
      working-directory: ./frontend
      run: yarn audit --audit-level moderate || true

  # Docker build and push (only on main branch)
  docker:
    runs-on: ubuntu-latest
    needs: [backend, frontend, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/contacts-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/contacts-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
